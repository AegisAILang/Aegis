# Generated from AegisLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,349,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,218,
        8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,229,8,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,47,1,47,5,47,302,8,47,10,47,12,47,305,9,47,
        1,48,4,48,308,8,48,11,48,12,48,309,1,49,4,49,313,8,49,11,49,12,49,
        314,1,49,1,49,4,49,319,8,49,11,49,12,49,320,1,50,1,50,1,50,1,50,
        5,50,327,8,50,10,50,12,50,330,9,50,1,50,1,50,1,51,4,51,335,8,51,
        11,51,12,51,336,1,51,1,51,1,52,1,52,5,52,343,8,52,10,52,12,52,346,
        9,52,1,52,1,52,0,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,360,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,114,1,0,0,0,
        5,121,1,0,0,0,7,126,1,0,0,0,9,129,1,0,0,0,11,135,1,0,0,0,13,139,
        1,0,0,0,15,146,1,0,0,0,17,149,1,0,0,0,19,154,1,0,0,0,21,158,1,0,
        0,0,23,161,1,0,0,0,25,167,1,0,0,0,27,173,1,0,0,0,29,180,1,0,0,0,
        31,187,1,0,0,0,33,192,1,0,0,0,35,196,1,0,0,0,37,217,1,0,0,0,39,228,
        1,0,0,0,41,230,1,0,0,0,43,232,1,0,0,0,45,234,1,0,0,0,47,236,1,0,
        0,0,49,238,1,0,0,0,51,240,1,0,0,0,53,242,1,0,0,0,55,244,1,0,0,0,
        57,246,1,0,0,0,59,248,1,0,0,0,61,250,1,0,0,0,63,253,1,0,0,0,65,255,
        1,0,0,0,67,257,1,0,0,0,69,259,1,0,0,0,71,261,1,0,0,0,73,263,1,0,
        0,0,75,265,1,0,0,0,77,267,1,0,0,0,79,270,1,0,0,0,81,273,1,0,0,0,
        83,275,1,0,0,0,85,278,1,0,0,0,87,280,1,0,0,0,89,283,1,0,0,0,91,285,
        1,0,0,0,93,292,1,0,0,0,95,299,1,0,0,0,97,307,1,0,0,0,99,312,1,0,
        0,0,101,322,1,0,0,0,103,334,1,0,0,0,105,340,1,0,0,0,107,108,5,109,
        0,0,108,109,5,111,0,0,109,110,5,100,0,0,110,111,5,117,0,0,111,112,
        5,108,0,0,112,113,5,101,0,0,113,2,1,0,0,0,114,115,5,115,0,0,115,
        116,5,116,0,0,116,117,5,114,0,0,117,118,5,117,0,0,118,119,5,99,0,
        0,119,120,5,116,0,0,120,4,1,0,0,0,121,122,5,101,0,0,122,123,5,110,
        0,0,123,124,5,117,0,0,124,125,5,109,0,0,125,6,1,0,0,0,126,127,5,
        102,0,0,127,128,5,110,0,0,128,8,1,0,0,0,129,130,5,99,0,0,130,131,
        5,111,0,0,131,132,5,110,0,0,132,133,5,115,0,0,133,134,5,116,0,0,
        134,10,1,0,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,138,5,116,
        0,0,138,12,1,0,0,0,139,140,5,114,0,0,140,141,5,101,0,0,141,142,5,
        116,0,0,142,143,5,117,0,0,143,144,5,114,0,0,144,145,5,110,0,0,145,
        14,1,0,0,0,146,147,5,105,0,0,147,148,5,102,0,0,148,16,1,0,0,0,149,
        150,5,101,0,0,150,151,5,108,0,0,151,152,5,115,0,0,152,153,5,101,
        0,0,153,18,1,0,0,0,154,155,5,102,0,0,155,156,5,111,0,0,156,157,5,
        114,0,0,157,20,1,0,0,0,158,159,5,105,0,0,159,160,5,110,0,0,160,22,
        1,0,0,0,161,162,5,119,0,0,162,163,5,104,0,0,163,164,5,105,0,0,164,
        165,5,108,0,0,165,166,5,101,0,0,166,24,1,0,0,0,167,168,5,97,0,0,
        168,169,5,119,0,0,169,170,5,97,0,0,170,171,5,105,0,0,171,172,5,116,
        0,0,172,26,1,0,0,0,173,174,5,79,0,0,174,175,5,112,0,0,175,176,5,
        116,0,0,176,177,5,105,0,0,177,178,5,111,0,0,178,179,5,110,0,0,179,
        28,1,0,0,0,180,181,5,82,0,0,181,182,5,101,0,0,182,183,5,115,0,0,
        183,184,5,117,0,0,184,185,5,108,0,0,185,186,5,116,0,0,186,30,1,0,
        0,0,187,188,5,78,0,0,188,189,5,111,0,0,189,190,5,110,0,0,190,191,
        5,101,0,0,191,32,1,0,0,0,192,193,5,97,0,0,193,194,5,110,0,0,194,
        195,5,100,0,0,195,34,1,0,0,0,196,197,5,111,0,0,197,198,5,114,0,0,
        198,36,1,0,0,0,199,200,5,105,0,0,200,201,5,110,0,0,201,218,5,116,
        0,0,202,203,5,102,0,0,203,204,5,108,0,0,204,205,5,111,0,0,205,206,
        5,97,0,0,206,218,5,116,0,0,207,208,5,98,0,0,208,209,5,111,0,0,209,
        210,5,111,0,0,210,218,5,108,0,0,211,212,5,115,0,0,212,213,5,116,
        0,0,213,214,5,114,0,0,214,215,5,105,0,0,215,216,5,110,0,0,216,218,
        5,103,0,0,217,199,1,0,0,0,217,202,1,0,0,0,217,207,1,0,0,0,217,211,
        1,0,0,0,218,38,1,0,0,0,219,220,5,116,0,0,220,221,5,114,0,0,221,222,
        5,117,0,0,222,229,5,101,0,0,223,224,5,102,0,0,224,225,5,97,0,0,225,
        226,5,108,0,0,226,227,5,115,0,0,227,229,5,101,0,0,228,219,1,0,0,
        0,228,223,1,0,0,0,229,40,1,0,0,0,230,231,5,58,0,0,231,42,1,0,0,0,
        232,233,5,59,0,0,233,44,1,0,0,0,234,235,5,44,0,0,235,46,1,0,0,0,
        236,237,5,46,0,0,237,48,1,0,0,0,238,239,5,40,0,0,239,50,1,0,0,0,
        240,241,5,41,0,0,241,52,1,0,0,0,242,243,5,123,0,0,243,54,1,0,0,0,
        244,245,5,125,0,0,245,56,1,0,0,0,246,247,5,91,0,0,247,58,1,0,0,0,
        248,249,5,93,0,0,249,60,1,0,0,0,250,251,5,45,0,0,251,252,5,62,0,
        0,252,62,1,0,0,0,253,254,5,61,0,0,254,64,1,0,0,0,255,256,5,43,0,
        0,256,66,1,0,0,0,257,258,5,45,0,0,258,68,1,0,0,0,259,260,5,42,0,
        0,260,70,1,0,0,0,261,262,5,47,0,0,262,72,1,0,0,0,263,264,5,37,0,
        0,264,74,1,0,0,0,265,266,5,33,0,0,266,76,1,0,0,0,267,268,5,61,0,
        0,268,269,5,61,0,0,269,78,1,0,0,0,270,271,5,33,0,0,271,272,5,61,
        0,0,272,80,1,0,0,0,273,274,5,60,0,0,274,82,1,0,0,0,275,276,5,60,
        0,0,276,277,5,61,0,0,277,84,1,0,0,0,278,279,5,62,0,0,279,86,1,0,
        0,0,280,281,5,62,0,0,281,282,5,61,0,0,282,88,1,0,0,0,283,284,5,63,
        0,0,284,90,1,0,0,0,285,286,5,73,0,0,286,287,5,78,0,0,287,288,5,68,
        0,0,288,289,5,69,0,0,289,290,5,78,0,0,290,291,5,84,0,0,291,92,1,
        0,0,0,292,293,5,68,0,0,293,294,5,69,0,0,294,295,5,68,0,0,295,296,
        5,69,0,0,296,297,5,78,0,0,297,298,5,84,0,0,298,94,1,0,0,0,299,303,
        7,0,0,0,300,302,7,1,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,
        1,0,0,0,303,304,1,0,0,0,304,96,1,0,0,0,305,303,1,0,0,0,306,308,7,
        2,0,0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,
        0,0,0,310,98,1,0,0,0,311,313,7,2,0,0,312,311,1,0,0,0,313,314,1,0,
        0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,5,46,
        0,0,317,319,7,2,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,
        0,0,320,321,1,0,0,0,321,100,1,0,0,0,322,328,5,34,0,0,323,327,8,3,
        0,0,324,325,5,92,0,0,325,327,5,34,0,0,326,323,1,0,0,0,326,324,1,
        0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,
        0,0,0,330,328,1,0,0,0,331,332,5,34,0,0,332,102,1,0,0,0,333,335,7,
        4,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,1,0,0,0,336,337,1,
        0,0,0,337,338,1,0,0,0,338,339,6,51,0,0,339,104,1,0,0,0,340,344,5,
        35,0,0,341,343,8,5,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,
        0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,6,
        52,0,0,348,106,1,0,0,0,11,0,217,228,303,309,314,320,326,328,336,
        344,1,6,0,0
    ]

class AegisLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MODULE = 1
    STRUCT = 2
    ENUM = 3
    FN = 4
    CONST = 5
    LET = 6
    RETURN = 7
    IF = 8
    ELSE = 9
    FOR = 10
    IN = 11
    WHILE = 12
    AWAIT = 13
    OPTION = 14
    RESULT = 15
    NONE = 16
    AND = 17
    OR = 18
    PRIMITIVE_TYPE = 19
    BOOLEAN_LITERAL = 20
    COLON = 21
    SEMICOLON = 22
    COMMA = 23
    DOT = 24
    LPAREN = 25
    RPAREN = 26
    LBRACE = 27
    RBRACE = 28
    LBRACKET = 29
    RBRACKET = 30
    ARROW = 31
    ASSIGN = 32
    PLUS = 33
    MINUS = 34
    MUL = 35
    DIV = 36
    MOD = 37
    NOT = 38
    EQUAL = 39
    NOT_EQUAL = 40
    LESS_THAN = 41
    LESS_EQUAL = 42
    GREATER_THAN = 43
    GREATER_EQUAL = 44
    QUESTION = 45
    INDENT = 46
    DEDENT = 47
    IDENTIFIER = 48
    INTEGER_LITERAL = 49
    FLOAT_LITERAL = 50
    STRING_LITERAL = 51
    WHITESPACE = 52
    COMMENT = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'struct'", "'enum'", "'fn'", "'const'", "'let'", 
            "'return'", "'if'", "'else'", "'for'", "'in'", "'while'", "'await'", 
            "'Option'", "'Result'", "'None'", "'and'", "'or'", "':'", "';'", 
            "','", "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'->'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'?'", "'INDENT'", "'DEDENT'" ]

    symbolicNames = [ "<INVALID>",
            "MODULE", "STRUCT", "ENUM", "FN", "CONST", "LET", "RETURN", 
            "IF", "ELSE", "FOR", "IN", "WHILE", "AWAIT", "OPTION", "RESULT", 
            "NONE", "AND", "OR", "PRIMITIVE_TYPE", "BOOLEAN_LITERAL", "COLON", 
            "SEMICOLON", "COMMA", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "LBRACKET", "RBRACKET", "ARROW", "ASSIGN", "PLUS", "MINUS", 
            "MUL", "DIV", "MOD", "NOT", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
            "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", "QUESTION", "INDENT", 
            "DEDENT", "IDENTIFIER", "INTEGER_LITERAL", "FLOAT_LITERAL", 
            "STRING_LITERAL", "WHITESPACE", "COMMENT" ]

    ruleNames = [ "MODULE", "STRUCT", "ENUM", "FN", "CONST", "LET", "RETURN", 
                  "IF", "ELSE", "FOR", "IN", "WHILE", "AWAIT", "OPTION", 
                  "RESULT", "NONE", "AND", "OR", "PRIMITIVE_TYPE", "BOOLEAN_LITERAL", 
                  "COLON", "SEMICOLON", "COMMA", "DOT", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "ARROW", "ASSIGN", 
                  "PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT", "EQUAL", 
                  "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", 
                  "GREATER_EQUAL", "QUESTION", "INDENT", "DEDENT", "IDENTIFIER", 
                  "INTEGER_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
                  "WHITESPACE", "COMMENT" ]

    grammarFileName = "AegisLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


